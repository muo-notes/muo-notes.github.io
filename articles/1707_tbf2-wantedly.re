= #技術書典 で入手した本: WANTEDLY TECH BOOK 2

4/9(日)に開催された@<href>{https://techbookfest.org/event/tbf02, 技術書典2}で買ってきた本を読んでいくシリーズ。
一覧は@<chapref>{1704_tbf2-booklist}。

もう買ってから3ヶ月経っていてだいぶアレだけど読み終わるまで読みます。

今回はWantedly執筆部 著の@<href>{https://www.wantedly.com/companies/wantedly/post_articles/29422, WANTEDLY TECH BOOK 2}です。

== 全体的に

開発者にとってのユーザビリティも重視する姿勢、良いと思います。

以下、各章のメモです。

== 第1章 変化に強いインフラと事例

Kubernetesの利用を絡めつつ、コンテナを使って開発/QA/Prod環境をせっせと回していくためのベース思想の話と小粒ながら筋良いツールで日々の仕事を楽にする話でした。
よいです。

(Kubernetesに関して)

//quote{
運用は間違いなく難しくなりますが
//}

好感を持てる表現。

==={typo-ch1} typo類

 * p.6 "Kuberntes" → "Kubernetes"
 * p.10 "ネットワークを越しに" → "ネットワーク越しに"
 * p.11 "コンテナ動くものは" → "コンテナで動くものは"
 * p.17 "変更したりや追加したり" → "変更したり追加したり"

== 第2章 未来に繋ぐGitHubの使い方

WHYとWHAT、よい文化ですね。

2.2.2(IssueやPRの間でのリンク)あたりを読んでいると、スタイルが完全に道を切り開いていく戦士の戦い方 on GitHubです。
これに加えてコミュニケーションミスでいろいろなものが失われるのを避けようという柱があり、これらのための工夫を凝らした仕事体制、というふうに読めました。

==={typo-ch2} typo類

 * p.18 "問題を対処して" → "問題に対処して"
 * p.19 "情報を残すか良いかが" → "情報を残すと良いかが"
 * p.20 "リポジトリー" → "リポジトリ" (この章でここだけ表記が異なるので)
 * p.21 "Notifications にという" → "Notificationsという"
 * p.22 "に表示がされますが" → "に表示されますが"

== 第3章 Wantedly People で動いている機械学習

第1章で書かれていたツール設計思想と同じく"Make each program do one thing well."で通しているのは🆒ですね。

3.2.2での例示はスパム判定の話と文字列正規化の話が微妙に混ざってしまっているので惜しい感じでした。
執筆の途中でテーマを切り替えた雰囲気でしょうか。

「3.4 動き続けるシステムで精度を保証したい」からが実運用中ならではという特に良い内容でした。

==={typo-ch3} typo類

 * p.32 "DBなどを覗いて" → "DBなどを除いて"
 * p.32 "Wantedly では、以下のようなサービスが動いています。" に続く部分、空行漏れで箇条書き出力されなかったようです
 * p.33 "’/ping’と’spam_detect’" → "’/ping’と’/spam_detect’"
 * p.33 "サーバ自体はは" → "サーバ自体は"
 * p.35 "データ分析計の" → "データ分析系の"
 * p.40 "保証がしずらい" → "保証をしづらい"
 * p.40 "床を捜査する" → "床を走査する" (あるいは掃除するの意図?)
 * 全体的にリストのキャプションが謎に"1zw"となっていました

== 第4章 Wantedly における開発環境のDocker化

章の冒頭、一番最初の文が

//quote{
ハッキリ言わせてもらいますが、世の中に出ている「開発環境Docker化」に関する記事はまるで役立たずです。
//}

で、「オッ、活きが良いな」という感触からのスタートでした。

文体は少々クセがありますが、普通に納得のいくプラクティス、およびWantedly社の環境(要求)で正しそうと納得いくもの、が多かったです。

なかでも、Dockerイメージ内にアプリケーションコードを含まないようにすることで、社内用開発イメージですらもパブリックにできるという視点は🆒ですね。

=== 4.1.3 中途半端なbootstrap script

地味に見どころ。

本項では

//quote{
本質的にこのようなscript はメンテナンスが難しくout-of-dateになりがちで、一発でセットアップが完了することはありません。
//}

という記載があるんですが、実は本書を読み進めると第5章(5.3.5)にて新規参加するアプリケーション開発者向けに一発インストール手順を用意するという話が出てきて、「あ～ ここでつながってるのかー。」という気持ちになります。

難しいですね。

第5章の著者である@koudaiiiさんも@<href>{https://www.wantedly.com/companies/wantedly/post_articles/27548}で言及しているように、環境の動態保存策としてのDocker(+なにかしらのDocker Registry)はなかなかパワあるので、個人的にはアプリケーション開発者向けの環境セットを構築スクリプトよりDockerで提供しておきたい族です(それでもDockerfileからのビルドや同ファイル自体のメンテは別問題ですが)。

=== 4.4.4 Vendor directory はvolume mount しない

vendorディレクトリに大量のファイルが存在する場合、これをvolume mountすると特にmacOS上でめちゃくちゃファイルアクセスが遅いという話題です。

//quote{
それらのツールを含む10通りのアプローチでこの問題に取り組みましたがvolumeで同期させることは不可能だと分かりました。
//}

とあったのですが、試した10通りの中に「macOS環境ではDocker for MacやVBoxバックエンドではなくVMware Fusionバックエンドを利用する」方法が含まれているのか否かが気になりました。
Railsほどではないにせよvendor分が巨大なSymfony 2系のプロダクトをmacOS+Dockerで触っていた際、バックエンド切り替えのみで十分なパフォーマンスを出せて他の検討を止めた記憶があるので…@<fn>{license-fee}。

//footnote[license-fee][もちろん、企業としての採否はライセンス費用や導入・運用コストとの兼ね合いでの判断かと思います]

==={typo-ch4} typo類

 * p.42 "必要になること殆どで、" → ""～なることが殆どで、"
 * p.45 "あたらにDSLを作らない" → "あらたに～"
 * p.45 "作らないてもよい" → "作らなくてもよい"
 * p.47 console内のdocker run部分、~/.sshをvolume mountしているけれど -v オプションが渡っていないな?と思いました(-だけになっている)
 * p.48 "これらのファイル普通に" → "～ファイルへ普通に"
 * p.48 "その遅さかなり" → "その遅さが～"
 * p.48 "そのからvolume" → "そこからvolume"
 * p.48 "docker compose" → "docker-compose" (ここまで全部表記が揃っているので)
 * 全体的にリストのキャプション先頭が謎に"1zw"となっていました(リスト4.1以外)

== 第5章 実践Kubernetes

Kubernetesマニフェストの解説が大変勉強になりました(特に5.5のBlue-Green Deploymentと5.6のRolling Deploy)。

==={typo-ch5} typo類

 * p.59 "出来きます" → "出来ます"
 * p.59 "Herokuのような手軽に" → "Herokuのような手軽さで"
 * p.59 "の追加いらず利用できる" → "の追加不要で利用できる"
 * p.59 "Dashborad" → "Dashboard"
 * p.59 コラム内の脚注(*6)が消えてしまってる.. たぶん@<href>{https://speakerdeck.com/koudaiii/number-chibadan?slide=14}へのリンクなんですが
 * p.61 "script/bootstap" → "script/bootstrap"(2箇所)